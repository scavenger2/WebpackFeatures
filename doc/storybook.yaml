---
references: 
    - https://storybook.js.org/basics/quick-start-guide/
    - https://www.robinwieruch.de/react-testing-tutorial/
    - https://www.robinwieruch.de/visual-regression-testing-react-storybook/

overview: 
    - it provides an environment(dev-server) to visualize different states of Components
    - runs outside of developing projects
    - storybook has its own Webpack setup, some features are supported defaultly
    - it could also be used to showcase your Components to others
    - testing UI Components between new code commits can make codebase more robust

installation: 
    - add any dependencies you need in your Webpack
    - add storybook addon for React: npm install @storybook/react --save-dev
    - add NPM script like "start-storybook -p 9001 -c .storybook"

configuration: 
    - Babel for ES6 transpiling is enabled defautly
    - Some loaders of Webpack were added to bring some good defaults
    - add a file like ".storybook/webpack.config.js" for manually config Webpack
    - it needs a directory for configuring like ".storybook" mentioned above
    - add a config file like ".storybook/config.js" which loads all stories: |
        import {configure} from '@storybook/react';
        function loadStories(){
            require('../stories/index.js')
        }
        configure(loadStories, module);
    - write your stories in correct directory

how to write stories: 
    - usually a story contains a single state of one of your components
    - technically, a story is a function that returns a Component
    - "require.context" could be used for loading-stories-dynamically
    - there are different aspects of UI testing: 
        - structural testing: make sure all contents are displayed, try snapshop testing
        - interaction testing: simulate behaviors users might do to your Components
        - Style testing: evaluate the look and feel of Components between code changes
        - manual testing: do this is recommended especially after a major code change

how to test Components with Enzyme: 
    - use "shallow" for shallow-rendering, it is perfect for unit-test
    - set different props for checking conditional-rendering
    - lightweight integration tests are performed in two aspects: 
        - by asserting whether the correct props are passed to children Components
        - by asserting whether correct local state are manipulated
    - "mount" renders the whole component hierarchy, might be used for more expensive integraton tests
    - "render" is lightweight "mount" because it does not run the lifecycle methods of Components, especially suitable for those stateless Components
    - testing pyramid on testing a Component: |
        to have a few unit tests since they are unlikely to break because they isolate the Component too much from the rest of whole application
        to have many integration tests to make sure they work as expected in their context(storybook.decorator might be helpful)
        thus, you might use "mount" or "render" more often instead of "shallow"
        do not forget interaction testing
        testing asynchronous logic by implementing a fake-backend(Sinon might be helpful)
    - visual regression testing can be used as automated tests to verify neither styles nor layouts breaks on different screen sizes, make sure all the Components rendered in the stories will be snapshoted then could be diffed with what's rendered
    
recommended addons: 
    - Knobs: 
        - purpose: used for keeping variables which are used in the stories as props flexible, these variables can be adjust in the rendered Storybook
        - installation: npm install @storybook/addon-knobs --save-dev
        - configuration: |
            import {withKnobs} from '@storybook/addon-knobs'; //add these lines to config
            ...
            addDecorator(withKnobs);
        - usage: |
            import {text} from '@storybook/addon-knobs'; //add these lines to stories
            ...
            const children = text('label', 'My Checkbox Label');
    - Viewport: 

...
